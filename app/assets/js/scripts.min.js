/*!
 * pwp7427
 * Fiercely quick and opinionated front-ends
 * https://HosseinKarami.github.io/fastshell
 * @author Hossein Karami
 * @version 1.0.5
 * Copyright 2019. MIT licensed.
 */
!function(){function e(){t===!1&&(t=!0,Munchkin.init("209-INQ-367"))}var t=!1,n=document.createElement("script");n.type="text/javascript",n.async=!0,n.src="//munchkin.marketo.net/munchkin.js",n.onreadystatechange=function(){"complete"!=this.readyState&&"loaded"!=this.readyState||e()},n.onload=e,document.getElementsByTagName("head")[0].appendChild(n)}(),function(e,t,n,o){"use strict";e(function(){function t(){e(".overlay").removeClass("show"),e("body").removeClass("noscroll")}function n(){if(e("#registerInterest").valid()){var t=e.trim(e("#registerInterest input[name=fName]").val()),n=e.trim(e("#registerInterest input[name=lName]").val()),o=e.trim(e("#registerInterest input[name=regEmail]").val().toLowerCase()),r=e.trim(e("#registerInterest input[name=regMobile]").val()),s=e("#registerInterest input[name='describesYou']:checked").val(),a=e("#registerInterest input[name='qualificationLevel']:checked").val(),i=e.trim(e("#registerInterest input[name=startDate]:checked").val()),l=e.trim(e("#registerInterest span.js-textReplace.no-radio").text()),d=e.trim(e("#registerInterest .secondary-school-student .added-text").text()),u=e("#registerInterest input[name=wantToKnow]:checked").map(function(){return this.value}).get().join("; ");MktoForms2.loadForm("//app-sn01.marketo.com","209-INQ-367",3171),MktoForms2.whenReady(function(m){console.log("myForm = "+m),console.log("Email address = "+o),console.log("First Name = "+t),console.log("Last Name = "+n),console.log("Mobile number = "+r),console.log("Lead Type = "+s),console.log("Commencement Data = "+i),console.log("Interest = "+u),console.log("study area = "+l),console.log("study Level = "+a),console.log("year Level = "+d),m.onSuccess(function(e){return console.log("Form successfully submitted"),console.log("Vals-",e),!1}),m.addHiddenFields({FirstName:t,LastName:n,Email:o,MobilePhone:r,Lead_Type__c:s,Commencement_Date__c:i,interests:u,Study_Area__c:l,Level_of_Study__c:a,disciplineArea:l,Year_Level__c:d}),m.submit(),c===!0&&(e("button[name=update]").html('<span style="display:none" class="loadersmall"></span>Updating details'),e(".loadersmall").css("display","inline-block")),c===!0?setTimeout(function(){e(".overlay").removeClass("show"),e(".register-interest-overlay").css("display: none"),e("body").removeClass("noscroll").delay(500).queue(function(){location.reload()})},3e3):(e(".overlay").removeClass("show"),e(".register-interest-overlay").css("display: none"),e("body").removeClass("noscroll"))})}}var o=e("meta[name=dkncoursetype]").attr("content"),r=e("meta[name=dknpagetitle]").attr("content"),s=e("meta[name=dkncourseaward]").attr("content"),a=e("span.course-name"),i=e("span.enquirer-name"),l=e(".js-next__form"),c=!0;e("form#registerInterest");if(""==!o){var d=o.search(/research/i),u=o.search(/undergraduate/i),m=o.search(/postgraduate/i),o="";u>-1?o="undergraduate":d>-1?o="research":m>-1&&(o="postgraduate")}else if(""==!r&&("Undergraduate courses"===r||"Postgraduate courses"===r||"Research degrees"===r)){var d=r.search(/research/i),u=r.search(/undergraduate/i),m=r.search(/postgraduate/i),o="";u>-1?o="undergraduate":d>-1?o="research":m>-1&&(o="postgraduate")}""==!s?a.text("the "+s+" course."):""==!r&&a.text(r),l.on("click",function(){var t=e.trim(e("#registerInterest input[name=firstName]").val());i.text(t+".")}),e("form#registerInterest").validate({rules:{fName:{required:!0,minlength:2},regEmail:{required:!0,email:!0},regMobile:{required:!0,number:!0,minlength:10,maxlength:10},describesYou:{required:!0}},messages:{fName:"Ensure your first name is entered correctly",regEmail:"Please ensure your email is in the correct format. e.g. name@email.com",regMobile:{required:"Check you number for correctness",number:"Phone number must consist of only numbers",minlength:"Phone number must be 10 digits long",maxlength:"Phone number must be 10 digits long"},describesYou:"You must select the one that best describes you"},errorPlacement:function(t,n){"describesYou"==n.attr("name")?e(".section-describesYou legend").append(t):"fName"==n.attr("name")?t.insertAfter(n):"regEmail"==n.attr("name")?t.insertAfter(n):"regMobile"==n.attr("name")?t.insertAfter(n):t.insertAfter(n)}}),e("form#registerInterest .form-section-one input").on("blur click",function(){var t=e(".inputContainer.required input").filter(function(){return""===e(this).val()}).length,n=e("input.error").length,o=e('input:radio[name="describesYou"]:checked').length;0===t&&0===n&&0!=o&&e("button[name=nextForm").removeAttr("disabled")}),e("#registerInterest button[type=submit]").one("click",function(e){e.preventDefault(),c=!0,n(e)});var p=e(".overlay"),h=e("body");e(".navigation__utility-link_Get_more_info").on("click",function(t){e("form#registerInterest");t.preventDefault(),p.addClass("show"),h.addClass("noscroll");e("form#registerInterest")}),e('input[type="text"], input[type="tel"]').focus(function(){var t=e(this).val();0==t.length&&e(this).parent().addClass("filled")}),e('input[type="text"], input[type="tel"]').focusout(function(){var t=e(this).val();0==t.length&&e(this).parent().removeClass("filled")}),e("input:radio[name=describesYou], input:radio[name=studyInterest]").on("click",function(){e(this).closest(".fakeDropdown").toggleClass("open filled"),e(this).parent().eq(2).addClass("filled")}),e(".section-describesYou .radioButton:not(.fakeDropdown)").on("click",function(){e(".fakeDropdown").hasClass("open")&&e(".fakeDropdown").removeClass("open filled"),e(".added-text").remove()}),e(".section-describesYou .sub-radio input").on("change",function(){e(".added-text").remove(),e(this).closest(".fakeDropdown").removeClass("open")}),e("input:radio[name=secondary-school]").on("change",function(){var t=e(this).val(),n=e(".secondary-school-student");e(".added-text").html(""),n.append('<span class="added-text">'+t+"</span>")}),e("input:radio[name=subject]").on("change",function(){var t=e(this).next("span").text(),n=e(".js-textReplace");n.text(t)}),e("input:radio").on("click",function(){e(this).is(":checked")&&(e("input:radio:not(:checked)").parent().removeClass("optionSelected"),e("input:radio:not(:checked)").parent().eq(2).removeClass("optionSelected"),e(this).parent().addClass("optionSelected"),e("input:radio:not(:checked)").closest("label").removeClass("optionSelected")),e(".radioButton.fakeDropdown > div > input[type=radio]").is(":checked")?e(".radioButton.fakeDropdown").addClass("optionSelected"):e(".radioButton.fakeDropdown").removeClass("optionSelected"),e(".sub-radio .radioButton input[type=radio]").is(":checked")&&(console.log("button pressed is "+e(this).closest("label")),e(".sub-radio .radioButton").removeClass("optionSelected"),e(".sub-radio input:radio:checked").parent().addClass("optionSelected"))}),e("input:checkbox").on("click",function(){e(this).is(":checked")?e(this).parent().addClass("optionSelected"):e(this).parent().removeClass("optionSelected")}),e("button[name=nextForm]").on("click",function(){e(this).find(".loadersmall").css("display","inline-block").stop().delay(3e3).queue(function(){e(".form-section-one").addClass("fadeOut"),e(".form-section-two").addClass("fadeIn")})}),e(".modalCloseButton").on("click",function(){e("#registerInterest").valid()?(c=!1,n(),e("#registerInterest button[name=update]").html('<span style="display:none" class="loadersmall"></span>Update my details')):(t(),e("label.error").remove())})})}(jQuery,window,document);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
